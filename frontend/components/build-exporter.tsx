"use client"

import { useState } from "react"
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from "@/components/ui/card"
import { Button } from "@/components/ui/button"
import { Badge } from "@/components/ui/badge"
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs"
import { Input } from "@/components/ui/input"
import { Label } from "@/components/ui/label"
import { Textarea } from "@/components/ui/textarea"
import { Download, Share2, FileText, Link, Mail, Copy, Save, Printer, ShoppingCart, ExternalLink } from "lucide-react"
import type { PCComponent } from "@/lib/pc-components"
import type { BuildRecommendation } from "@/lib/recommendation-engine"

interface BuildExporterProps {
  recommendation: BuildRecommendation
  components: PCComponent[]
}

export function BuildExporter({ recommendation, components }: BuildExporterProps) {
  const [buildName, setBuildName] = useState("My Custom PC Build")
  const [buildDescription, setBuildDescription] = useState("")
  const [shareUrl, setShareUrl] = useState("")
  const [isGeneratingUrl, setIsGeneratingUrl] = useState(false)

  const totalPrice = components.reduce((sum, c) => sum + c.price, 0)

  const generateTextExport = () => {
    const text = `
${buildName}
${"=".repeat(buildName.length)}

${buildDescription ? `Description: ${buildDescription}\n` : ""}
Total Price: $${totalPrice.toLocaleString()}
Performance Score: ${recommendation.performanceScore}/100

Components:
${components
  .map(
    (c) =>
      `• ${c.category.toUpperCase()}: ${c.name} - ${c.brand} - $${c.price}
  Performance: ${c.performanceScore}/100
  Key Specs: ${Object.entries(c.specs)
    .slice(0, 3)
    .map(([k, v]) => `${k}: ${v}`)
    .join(", ")}`,
  )
  .join("\n\n")}

Build Reasoning:
${recommendation.reasoning}

${
  recommendation.compatibilityIssues.length > 0
    ? `\nCompatibility Notes:\n${recommendation.compatibilityIssues.map((issue) => `• ${issue}`).join("\n")}`
    : "\nAll components are fully compatible!"
}

Generated by PC Builder AI
    `.trim()

    return text
  }

  const generateCSVExport = () => {
    const headers = ["Category", "Component", "Brand", "Price", "Performance Score", "Key Specs"]
    const rows = components.map((c) => [
      c.category,
      c.name,
      c.brand,
      c.price,
      c.performanceScore,
      Object.entries(c.specs)
        .slice(0, 2)
        .map(([k, v]) => `${k}: ${v}`)
        .join("; "),
    ])

    const csv = [headers, ...rows].map((row) => row.map((cell) => `"${cell}"`).join(",")).join("\n")
    return csv
  }

  const generateShoppingList = () => {
    return components
      .map(
        (c) => `${c.name} - ${c.brand}
Price: $${c.price}
Category: ${c.category}
Performance: ${c.performanceScore}/100
---`,
      )
      .join("\n\n")
  }

  const downloadFile = (content: string, filename: string, type: string) => {
    const blob = new Blob([content], { type })
    const url = URL.createObjectURL(blob)
    const a = document.createElement("a")
    a.href = url
    a.download = filename
    document.body.appendChild(a)
    a.click()
    document.body.removeChild(a)
    URL.revokeObjectURL(url)
  }

  const generateShareUrl = async () => {
    setIsGeneratingUrl(true)
    // Simulate URL generation
    await new Promise((resolve) => setTimeout(resolve, 1000))
    const buildId = Math.random().toString(36).substring(2, 15)
    const url = `https://pcbuilder.ai/build/${buildId}`
    setShareUrl(url)
    setIsGeneratingUrl(false)
  }

  const copyToClipboard = (text: string) => {
    navigator.clipboard.writeText(text)
  }

  const shareViaEmail = () => {
    const subject = encodeURIComponent(`Check out my PC build: ${buildName}`)
    const body = encodeURIComponent(`
I created a custom PC build using PC Builder AI!

${buildName}
Total Price: $${totalPrice.toLocaleString()}
Performance Score: ${recommendation.performanceScore}/100

Components:
${components.map((c) => `• ${c.name} - $${c.price}`).join("\n")}

${shareUrl ? `View full build: ${shareUrl}` : ""}
    `)
    window.open(`mailto:?subject=${subject}&body=${body}`)
  }

  return (
    <Card className="border-2 border-cyan-200">
      <CardHeader>
        <CardTitle className="flex items-center gap-2 font-[family-name:var(--font-heading)]">
          <Share2 className="h-5 w-5 text-cyan-600" />
          Export & Share Build
        </CardTitle>
        <CardDescription>Save, share, or export your PC build configuration</CardDescription>
      </CardHeader>
      <CardContent>
        <Tabs defaultValue="export" className="w-full">
          <TabsList className="grid w-full grid-cols-3">
            <TabsTrigger value="export">Export Files</TabsTrigger>
            <TabsTrigger value="share">Share Build</TabsTrigger>
            <TabsTrigger value="shopping">Shopping</TabsTrigger>
          </TabsList>

          <TabsContent value="export" className="space-y-4">
            <div className="grid gap-4">
              <div className="space-y-2">
                <Label htmlFor="build-name">Build Name</Label>
                <Input
                  id="build-name"
                  value={buildName}
                  onChange={(e) => setBuildName(e.target.value)}
                  placeholder="Enter build name..."
                />
              </div>
              <div className="space-y-2">
                <Label htmlFor="build-description">Description (Optional)</Label>
                <Textarea
                  id="build-description"
                  value={buildDescription}
                  onChange={(e) => setBuildDescription(e.target.value)}
                  placeholder="Add notes about your build..."
                  className="min-h-20"
                />
              </div>
            </div>

            <div className="grid md:grid-cols-2 gap-4">
              <Card className="border-green-200 bg-green-50/50">
                <CardHeader className="pb-3">
                  <CardTitle className="text-lg flex items-center gap-2">
                    <FileText className="h-4 w-4 text-green-600" />
                    Text Format
                  </CardTitle>
                  <CardDescription>Detailed build list with specifications</CardDescription>
                </CardHeader>
                <CardContent>
                  <Button
                    onClick={() => downloadFile(generateTextExport(), `${buildName}.txt`, "text/plain")}
                    className="w-full bg-green-600 hover:bg-green-700"
                  >
                    <Download className="h-4 w-4 mr-2" />
                    Download TXT
                  </Button>
                </CardContent>
              </Card>

              <Card className="border-blue-200 bg-blue-50/50">
                <CardHeader className="pb-3">
                  <CardTitle className="text-lg flex items-center gap-2">
                    <FileText className="h-4 w-4 text-blue-600" />
                    Spreadsheet
                  </CardTitle>
                  <CardDescription>CSV format for Excel or Google Sheets</CardDescription>
                </CardHeader>
                <CardContent>
                  <Button
                    onClick={() => downloadFile(generateCSVExport(), `${buildName}.csv`, "text/csv")}
                    className="w-full bg-blue-600 hover:bg-blue-700"
                  >
                    <Download className="h-4 w-4 mr-2" />
                    Download CSV
                  </Button>
                </CardContent>
              </Card>

              <Card className="border-purple-200 bg-purple-50/50">
                <CardHeader className="pb-3">
                  <CardTitle className="text-lg flex items-center gap-2">
                    <ShoppingCart className="h-4 w-4 text-purple-600" />
                    Shopping List
                  </CardTitle>
                  <CardDescription>Simple list for shopping reference</CardDescription>
                </CardHeader>
                <CardContent>
                  <Button
                    onClick={() => downloadFile(generateShoppingList(), `${buildName}_shopping.txt`, "text/plain")}
                    className="w-full bg-purple-600 hover:bg-purple-700"
                  >
                    <Download className="h-4 w-4 mr-2" />
                    Download List
                  </Button>
                </CardContent>
              </Card>

              <Card className="border-orange-200 bg-orange-50/50">
                <CardHeader className="pb-3">
                  <CardTitle className="text-lg flex items-center gap-2">
                    <Printer className="h-4 w-4 text-orange-600" />
                    Print Ready
                  </CardTitle>
                  <CardDescription>Formatted for printing</CardDescription>
                </CardHeader>
                <CardContent>
                  <Button onClick={() => window.print()} className="w-full bg-orange-600 hover:bg-orange-700">
                    <Printer className="h-4 w-4 mr-2" />
                    Print Build
                  </Button>
                </CardContent>
              </Card>
            </div>
          </TabsContent>

          <TabsContent value="share" className="space-y-4">
            <Card>
              <CardHeader>
                <CardTitle className="text-lg">Generate Share Link</CardTitle>
                <CardDescription>Create a shareable URL for your build</CardDescription>
              </CardHeader>
              <CardContent className="space-y-4">
                {!shareUrl ? (
                  <Button
                    onClick={generateShareUrl}
                    disabled={isGeneratingUrl}
                    className="w-full bg-cyan-600 hover:bg-cyan-700"
                  >
                    {isGeneratingUrl ? (
                      <>
                        <div className="animate-spin rounded-full h-4 w-4 border-2 border-white border-t-transparent mr-2" />
                        Generating...
                      </>
                    ) : (
                      <>
                        <Link className="h-4 w-4 mr-2" />
                        Generate Share URL
                      </>
                    )}
                  </Button>
                ) : (
                  <div className="space-y-3">
                    <div className="flex items-center gap-2">
                      <Input value={shareUrl} readOnly className="flex-1" />
                      <Button variant="outline" onClick={() => copyToClipboard(shareUrl)} className="bg-transparent">
                        <Copy className="h-4 w-4" />
                      </Button>
                    </div>
                    <div className="flex gap-2">
                      <Button variant="outline" onClick={shareViaEmail} className="flex-1 bg-transparent">
                        <Mail className="h-4 w-4 mr-2" />
                        Email
                      </Button>
                      <Button
                        variant="outline"
                        onClick={() => copyToClipboard(generateTextExport())}
                        className="flex-1 bg-transparent"
                      >
                        <Copy className="h-4 w-4 mr-2" />
                        Copy Build
                      </Button>
                    </div>
                  </div>
                )}
              </CardContent>
            </Card>

            <Card>
              <CardHeader>
                <CardTitle className="text-lg">Build Summary</CardTitle>
              </CardHeader>
              <CardContent>
                <div className="space-y-3">
                  <div className="flex justify-between items-center">
                    <span className="font-medium">Total Components:</span>
                    <Badge variant="outline">{components.length}</Badge>
                  </div>
                  <div className="flex justify-between items-center">
                    <span className="font-medium">Total Price:</span>
                    <Badge className="bg-green-100 text-green-800">${totalPrice.toLocaleString()}</Badge>
                  </div>
                  <div className="flex justify-between items-center">
                    <span className="font-medium">Performance Score:</span>
                    <Badge className="bg-blue-100 text-blue-800">{recommendation.performanceScore}/100</Badge>
                  </div>
                  <div className="flex justify-between items-center">
                    <span className="font-medium">Compatibility:</span>
                    <Badge
                      className={
                        recommendation.compatibilityIssues.length === 0
                          ? "bg-green-100 text-green-800"
                          : "bg-orange-100 text-orange-800"
                      }
                    >
                      {recommendation.compatibilityIssues.length === 0 ? "Perfect" : "Minor Issues"}
                    </Badge>
                  </div>
                </div>
              </CardContent>
            </Card>
          </TabsContent>

          <TabsContent value="shopping" className="space-y-4">
            <Card>
              <CardHeader>
                <CardTitle className="text-lg">Find Best Deals</CardTitle>
                <CardDescription>Compare prices across different retailers</CardDescription>
              </CardHeader>
              <CardContent>
                <div className="space-y-4">
                  {components.slice(0, 3).map((component) => (
                    <div key={component.id} className="border rounded-lg p-4">
                      <div className="flex items-center justify-between mb-3">
                        <div>
                          <h4 className="font-medium">{component.name}</h4>
                          <p className="text-sm text-muted-foreground">{component.brand}</p>
                        </div>
                        <Badge variant="outline">${component.price}</Badge>
                      </div>
                      <div className="flex gap-2">
                        <Button variant="outline" size="sm" className="flex-1 bg-transparent">
                          <ExternalLink className="h-3 w-3 mr-1" />
                          Amazon
                        </Button>
                        <Button variant="outline" size="sm" className="flex-1 bg-transparent">
                          <ExternalLink className="h-3 w-3 mr-1" />
                          Newegg
                        </Button>
                        <Button variant="outline" size="sm" className="flex-1 bg-transparent">
                          <ExternalLink className="h-3 w-3 mr-1" />
                          Best Buy
                        </Button>
                      </div>
                    </div>
                  ))}
                  <Button className="w-full bg-cyan-600 hover:bg-cyan-700">
                    <ShoppingCart className="h-4 w-4 mr-2" />
                    Find All Components
                  </Button>
                </div>
              </CardContent>
            </Card>

            <Card>
              <CardHeader>
                <CardTitle className="text-lg">Price Tracking</CardTitle>
                <CardDescription>Get notified when prices drop</CardDescription>
              </CardHeader>
              <CardContent>
                <div className="space-y-3">
                  <div className="flex items-center gap-2">
                    <Input placeholder="Enter your email..." className="flex-1" />
                    <Button className="bg-cyan-600 hover:bg-cyan-700">
                      <Save className="h-4 w-4 mr-2" />
                      Track
                    </Button>
                  </div>
                  <p className="text-xs text-muted-foreground">
                    We'll email you when any component in your build goes on sale
                  </p>
                </div>
              </CardContent>
            </Card>
          </TabsContent>
        </Tabs>
      </CardContent>
    </Card>
  )
}
